---
- name: Clone QCOW2 Image and Create a VM
  hosts: localhost
  become: yes
  vars_prompt:
    - name: "vm_name"
      prompt: "Enter the VM name"
      default: "test-vm"
      private: no

    - name: "vm_ram"
      prompt: "Enter the amount of RAM for the VM (in MB)"
      default: 2048
      private: no

    - name: "vm_cpu"
      prompt: "Enter the number of CPUs for the VM"
      default: 2
      private: no

    - name: "base_qcow_image"
      prompt: "Enter the path to the base QCOW2 image"
      default: "/var/lib/libvirt/images/ubuntu24-Main.qcow2"
      private: no

  vars:
    new_qcow_image: "/var/lib/libvirt/images/{{ vm_name }}.qcow2"

  tasks:
    - name: Ensure images directory exists
      file:
        path: /var/lib/libvirt/images
        state: directory
        mode: '0755'

    - name: Clone the QCOW2 image
      shell: sudo qemu-img convert -O qcow2 {{ base_qcow_image }} {{ new_qcow_image }}
      args:
        creates: "{{ new_qcow_image }}"

    - name: Generate a random MAC address
      shell: "echo 52:54:00:$(openssl rand -hex 3 | sed 's/\\(..\\)/\\1:/g; s/:$//')"
      register: mac_address

    - name: Display generated MAC address
      debug:
        msg: "Generated MAC Address: {{ mac_address.stdout }}"

    - name: Ensure VM does not already exist
      command: virsh list --all
      register: existing_vms

    - name: Create VM if it does not exist
      shell: |
        virt-install \
        --name {{ vm_name }} \
        --ram {{ vm_ram }} \
        --vcpus {{ vm_cpu }} \
        --disk path={{ new_qcow_image }},format=qcow2 \
        --os-variant ubuntu20.04 \
        --network bridge=virbr0,mac={{ mac_address.stdout }},model=virtio \
        --import \
        --graphics vnc \
        --noautoconsole
      when: vm_name not in existing_vms.stdout

    - name: Wait for the VM to start
      command: virsh list --state-running
      register: vm_running
      retries: 5
      delay: 10
      until: vm_name in vm_running.stdout

    - name: Wait for VM IP via ARP
      shell: "arp -n | grep '{{ mac_address.stdout }}' | awk '{print $1}'"
      register: arp_ip_output
      retries: 10
      delay: 10
      until: arp_ip_output.stdout | length > 0

    - name: Set VM IP from ARP (if found)
      set_fact:
        vm_ip: "{{ arp_ip_output.stdout }}"

    - name: Display VM IP address
      debug:
        msg: "The IP address of VM {{ vm_name }} is {{ vm_ip }}"

    - name: Print final status
      debug:
        msg: "VM {{ vm_name }} created successfully with MAC Address: {{ mac_address.stdout }} and IP Address: {{ vm_ip }}"
